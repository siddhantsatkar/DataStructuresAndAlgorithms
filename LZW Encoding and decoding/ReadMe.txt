//Siddhant Jain
ReadMe

1. Program description-
	- Encoding
	- The LZW encoding pragram takes the input text file passed as the first argument by the command line.
	- It reads the number of encoding bits passed as the second argument.
	- The data of the input text file is written in a string using BufferedReader.
	- A table is initialised with all the 256 ASCII chacteres and their codes.
	- The string is passed in the while loop and each of its character is checked for code.
	- If the code is in table, that code is saved in another list.
	- If code is not in the table, a code for it is generated and it is stored in both the table and new list.
	- When the whole string is finished with checking, the new list which consists of codes is passed to output file.
	- The output file is saved as input file name with the extension ".lzw".
	- The output sent to the output file is in UTF-16BE encoding.
	- Decoding
	- The LZW decoding program is almost similar to encoding program.
	- The pragram takes the input lzw file passed as the first argument by the command line.
	- It reads the number of encoding bits passed as the second argument.
	- The data of the input lzw file is written in a string using BufferedReader and using UTF-16BE encoding.
	- A table is initialised with all the 256 ASCII chacteres and their codes.
	- The string is passed in the while loop and each of the code is checked for its character.
	- If the code is in table, that character is saved in another list.
	- If code is not in the table, a code for it is generated and it is stored in both the table and its respective character in the new list.
	- When the whole string is finished with checking, the new list which consists of characters is passed to output file.
	- The output file is saved as input file name with the extension "_decoded.txt".
	- The output sent to the output file is in UTF-8 encoding.
	
2. Data Structures-
	- There are mainly two data structures used in both encoding and decoding.
	- First one is Hashmap. Second is ArrayList.
	- HashMap is used as a dictionary where characters or strings and their codes are saved.
	- ArrayList is used to store the output after encoding/decoding is done on the input string.
	- I could have used the HashSet instead of ArrayList to improve the performance but it does not save the order of the input.
	
3. Files-
	- There are 3 files in the zip. 1)Encoder.java 2)Decoder.java 3)ReadMe.txt

4. Summary-
	- The program should work if the arguments are passed correctly.
	- The first argument to the Encoder.java should be a pre-existing text file and second argument shoukd be number of encoding bits.
	- The first argument to the Decoder.java should be an lzw file generated by encoder and second argument shoukd be number of encoding bits.
	- The code will fail if the number of encoding bits is greater than 31 because Max_Table_Size size is stored in int.
	
5. Programming Language-
	- Java
	
6. Compiler version-
	- javac 1.8.0
	
7. How to run program-
	- The zip file contains 3 files. 1)Encoder.java 2)Decoder.java 3)ReadMe.txt
	- Save the Encoder.java and Decoder.java in a folder. I will assume that you save the files in "C:\\test1".
	- Now make another folder and put a text file in it. I will assume that you made the folder "test" in C drive and text file inside "test" folder is called "input.txt".
	- The text file (input.txt) should contain some strings.
	- In the Encoder.java file at line 36, the file path is "C:\\test\\". You shoould change the path according to where you saved your input text file.
	- In the Decoder.java file at line 23, the file path is "C:\\users\\sid\\workspace\\AlgosProject1\\". You shoould change the path according to where you saved your Encoder.java and Decoder.java files.
	- Open the command line and change the directory to where your Encoder.java is located.
	- Give the command "$ javac Encoder.java". This will create an Encoder.class file.
	- Give the command "$ java Encoder input.txt 12". Here, input.txt is the name of the input text file. You should give the name of your own input file.
	- An lzw file will be generated in the same folder as your Encoder.java. This is the encoded file.
	- Give the command "$ javac Decoder.java". This will create an Decoder.class file.
	- Give the command "$ java Decoder input.lzw 12". Here, input.lzw is the name of the generated lzw file. You should give the name of your own lzw file.
	- A text file called "input_decoded.txt" will be generated which will contain decoded text and it should match initial string in input.txt. 